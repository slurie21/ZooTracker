// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZooTracker.DataAccess.Context;

#nullable disable

namespace ZooTracker.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240703150032_AddAnimalAndSeedData")]
    partial class AddAnimalAndSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.EnterpriseLogging", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("App")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrelationID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("EnterpriseLogging", "Logging");
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.JWTRefreshToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("JwtRefresh");
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.JwtBlacklistToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Jti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JwtBlacklistToken");
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.OpenDaysHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int>("ZooId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZooId");

                    b.ToTable("OpenDaysHours", "Zoo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CloseTime = new TimeOnly(17, 0, 0),
                            DayOfWeek = "Monday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(9, 0, 0),
                            ZooId = 1
                        },
                        new
                        {
                            Id = 2,
                            CloseTime = new TimeOnly(17, 0, 0),
                            DayOfWeek = "Tuesday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(9, 0, 0),
                            ZooId = 1
                        },
                        new
                        {
                            Id = 3,
                            CloseTime = new TimeOnly(17, 0, 0),
                            DayOfWeek = "Wednesday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(9, 0, 0),
                            ZooId = 1
                        },
                        new
                        {
                            Id = 4,
                            CloseTime = new TimeOnly(17, 0, 0),
                            DayOfWeek = "Thursday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(9, 0, 0),
                            ZooId = 1
                        },
                        new
                        {
                            Id = 5,
                            CloseTime = new TimeOnly(17, 0, 0),
                            DayOfWeek = "Friday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(9, 0, 0),
                            ZooId = 1
                        },
                        new
                        {
                            Id = 6,
                            CloseTime = new TimeOnly(18, 0, 0),
                            DayOfWeek = "Saturday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(10, 0, 0),
                            ZooId = 1
                        },
                        new
                        {
                            Id = 7,
                            CloseTime = new TimeOnly(18, 0, 0),
                            DayOfWeek = "Sunday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(10, 0, 0),
                            ZooId = 1
                        },
                        new
                        {
                            Id = 8,
                            CloseTime = new TimeOnly(16, 0, 0),
                            DayOfWeek = "Monday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(8, 0, 0),
                            ZooId = 2
                        },
                        new
                        {
                            Id = 9,
                            CloseTime = new TimeOnly(16, 0, 0),
                            DayOfWeek = "Tuesday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(8, 0, 0),
                            ZooId = 2
                        },
                        new
                        {
                            Id = 10,
                            CloseTime = new TimeOnly(16, 0, 0),
                            DayOfWeek = "Wednesday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(8, 0, 0),
                            ZooId = 2
                        },
                        new
                        {
                            Id = 11,
                            CloseTime = new TimeOnly(16, 0, 0),
                            DayOfWeek = "Thursday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(8, 0, 0),
                            ZooId = 2
                        },
                        new
                        {
                            Id = 12,
                            CloseTime = new TimeOnly(16, 0, 0),
                            DayOfWeek = "Friday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(8, 0, 0),
                            ZooId = 2
                        },
                        new
                        {
                            Id = 13,
                            CloseTime = new TimeOnly(17, 0, 0),
                            DayOfWeek = "Saturday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(9, 0, 0),
                            ZooId = 2
                        },
                        new
                        {
                            Id = 14,
                            CloseTime = new TimeOnly(17, 0, 0),
                            DayOfWeek = "Sunday",
                            IsOpen = true,
                            OpenTime = new TimeOnly(9, 0, 0),
                            ZooId = 2
                        });
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.Zoo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("ChildTicket")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MainAttraction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("SeniorTicket")
                        .HasColumnType("float");

                    b.Property<double>("TicketCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Zoos", "Zoo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChildTicket = 15.0,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            IsActive = true,
                            MainAttraction = "Lions",
                            Name = "CityA Zoo",
                            SeniorTicket = 20.0,
                            TicketCost = 25.0
                        },
                        new
                        {
                            Id = 2,
                            ChildTicket = 18.0,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            IsActive = true,
                            MainAttraction = "Tigers",
                            Name = "CityB Zoo",
                            SeniorTicket = 25.0,
                            TicketCost = 30.0
                        });
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.ZooAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZooId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZooId")
                        .IsUnique();

                    b.ToTable("ZooAddress", "Zoo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "CityA",
                            CreateBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            IsActive = true,
                            State = "StateA",
                            Street1 = "123 Zoo St",
                            Zip = "12345",
                            ZooId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "CityB",
                            CreateBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            IsActive = true,
                            State = "StateB",
                            Street1 = "456 Zoo Ln",
                            Zip = "67890",
                            ZooId = 2
                        });
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.ZooAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FemaleNum")
                        .HasColumnType("int");

                    b.Property<string>("Habitat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaleNum")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalNum")
                        .HasColumnType("int");

                    b.Property<int>("ZooId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZooId");

                    b.HasIndex("Name", "ZooId")
                        .IsUnique();

                    b.ToTable("Animals", "Zoo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 3,
                            Habitat = "Savannah",
                            IsActive = true,
                            MaleNum = 2,
                            Name = "Lion",
                            TotalNum = 5,
                            ZooId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 2,
                            Habitat = "Forest",
                            IsActive = true,
                            MaleNum = 3,
                            Name = "Tiger",
                            TotalNum = 5,
                            ZooId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 4,
                            Habitat = "Grassland",
                            IsActive = true,
                            MaleNum = 1,
                            Name = "Elephant",
                            TotalNum = 5,
                            ZooId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 2,
                            Habitat = "Savannah",
                            IsActive = true,
                            MaleNum = 2,
                            Name = "Giraffe",
                            TotalNum = 4,
                            ZooId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 2,
                            Habitat = "Forest",
                            IsActive = true,
                            MaleNum = 2,
                            Name = "Panda",
                            TotalNum = 4,
                            ZooId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 5,
                            Habitat = "Arctic",
                            IsActive = true,
                            MaleNum = 5,
                            Name = "Penguin",
                            TotalNum = 10,
                            ZooId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 3,
                            Habitat = "Savannah",
                            IsActive = true,
                            MaleNum = 2,
                            Name = "Lion",
                            TotalNum = 5,
                            ZooId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 2,
                            Habitat = "Forest",
                            IsActive = true,
                            MaleNum = 3,
                            Name = "Tiger",
                            TotalNum = 5,
                            ZooId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 4,
                            Habitat = "Grassland",
                            IsActive = true,
                            MaleNum = 1,
                            Name = "Elephant",
                            TotalNum = 5,
                            ZooId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 2,
                            Habitat = "Savannah",
                            IsActive = true,
                            MaleNum = 2,
                            Name = "Giraffe",
                            TotalNum = 4,
                            ZooId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 2,
                            Habitat = "Forest",
                            IsActive = true,
                            MaleNum = 2,
                            Name = "Panda",
                            TotalNum = 4,
                            ZooId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2024, 7, 3, 15, 0, 31, 816, DateTimeKind.Utc).AddTicks(6609),
                            FemaleNum = 5,
                            Habitat = "Arctic",
                            IsActive = true,
                            MaleNum = 5,
                            Name = "Penguin",
                            TotalNum = 10,
                            ZooId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ZooTracker.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ZooTracker.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooTracker.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ZooTracker.Models.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.OpenDaysHours", b =>
                {
                    b.HasOne("ZooTracker.Models.Entity.Zoo", null)
                        .WithMany("OpenDaysHours")
                        .HasForeignKey("ZooId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.ZooAddress", b =>
                {
                    b.HasOne("ZooTracker.Models.Entity.Zoo", null)
                        .WithOne("Address")
                        .HasForeignKey("ZooTracker.Models.Entity.ZooAddress", "ZooId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.ZooAnimal", b =>
                {
                    b.HasOne("ZooTracker.Models.Entity.Zoo", null)
                        .WithMany("Animals")
                        .HasForeignKey("ZooId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZooTracker.Models.Entity.Zoo", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Animals");

                    b.Navigation("OpenDaysHours");
                });
#pragma warning restore 612, 618
        }
    }
}
